// ==========================================
// EXEMPLO DE MIGRA√á√ÉO: QUEST√ÉO INDIVIDUAL PARA SISTEMA UNIVERSAL
// ==========================================

import { useParams, useNavigate, Routes, Route } from 'react-router-dom';
import { useState, useContext, createContext } from 'react';
import UniversalQuestionSolver from '../components/universal/UniversalQuestionSolver';
import { 
  drSkodaConfig, 
  simpleConfig, 
  studyConfig, 
  createCustomQuestionConfig 
} from '../data/questionConfigFactory';

// ==========================================
// EXEMPLO 1: MIGRA√á√ÉO SIMPLES
// ==========================================

// ANTES: P√°gina espec√≠fica com c√≥digo duplicado
/*
function OldQuestionPage() {
  const { questionId } = useParams();
  const navigate = useNavigate();
  
  // Muito c√≥digo espec√≠fico para cada tipo de quest√£o...
  return (
    <div>
      <QuestionSolverHeader />
      <QuestionInfo />
      <QuestionStatement />
      <QuestionAlternatives />
      // ... etc
    </div>
  );
}
*/

// DEPOIS: P√°gina simples com configura√ß√£o
export function NewQuestionPage() {
  const { questionId } = useParams<{ questionId: string }>();
  const navigate = useNavigate();
  
  // Configura√ß√£o simples e reutiliz√°vel
  const config = studyConfig(
    parseInt(questionId || '1'),
    () => navigate('/questions'),
    () => navigate('/questions')
  );
  
  return <UniversalQuestionSolver {...config} />;
}

// ==========================================
// EXEMPLO 2: DIFERENTES MODOS PARA MESMA QUEST√ÉO
// ==========================================

// Quest√£o em modo Dr. Skoda completo
export function DrSkodaQuestionPage() {
  const { questionId } = useParams<{ questionId: string }>();
  const navigate = useNavigate();
  
  const config = drSkodaConfig(
    parseInt(questionId || '1'),
    () => navigate('/study'),
    () => navigate('/study')
  );
  
  return <UniversalQuestionSolver {...config} />;
}

// Quest√£o em modo simples
export function SimpleQuestionPage() {
  const { questionId } = useParams<{ questionId: string }>();
  const navigate = useNavigate();
  
  const config = simpleConfig(
    parseInt(questionId || '1'),
    () => navigate('/questions'),
    () => navigate('/questions')
  );
  
  return <UniversalQuestionSolver {...config} />;
}

// ==========================================
// EXEMPLO 3: CONFIGURA√á√ÉO PERSONALIZADA PARA CASO ESPEC√çFICO
// ==========================================

// Quest√£o para simulado (tempo limitado, sem Dr. Skoda)
export function ExamQuestionPage() {
  const { questionId } = useParams<{ questionId: string }>();
  const navigate = useNavigate();
  
  const config = createCustomQuestionConfig(
    parseInt(questionId || '1'),
    'minimal', // Preset base minimalista
    {
      uiConfig: {
        showProgress: true, // Mostrar progresso no simulado
        className: 'exam-mode'
      },
      integrationConfig: {
        saveAttempts: true, // Salvar para an√°lise posterior
        trackAnalytics: true
      },
      onBack: () => navigate('/exam'),
      onFinish: () => navigate('/exam/results'),
      backUrl: '/exam',
      finishUrl: '/exam/results'
    }
  );
  
  return <UniversalQuestionSolver {...config} />;
}

// ==========================================
// EXEMPLO 4: ROTAS DIN√ÇMICAS BASEADAS EM TIPO
// ==========================================

// Router principal com diferentes tipos
export function QuestionRouter() {
  return (
    <Routes>
      {/* Rota para Dr. Skoda completo */}
      <Route 
        path="/question/dr-skoda/:questionId" 
        element={<DrSkodaQuestionWrapper />} 
      />
      
      {/* Rota para quest√£o simples */}
      <Route 
        path="/question/simple/:questionId" 
        element={<SimpleQuestionWrapper />} 
      />
      
      {/* Rota para modo estudo */}
      <Route 
        path="/question/study/:questionId" 
        element={<StudyQuestionWrapper />} 
      />
      
      {/* Rota para simulado */}
      <Route 
        path="/exam/question/:questionId" 
        element={<ExamQuestionWrapper />} 
      />
      
      {/* Rota padr√£o */}
      <Route 
        path="/question/:questionId" 
        element={<DefaultQuestionWrapper />} 
      />
    </Routes>
  );
}

// Wrappers simples para cada tipo
function DrSkodaQuestionWrapper() {
  const { questionId } = useParams<{ questionId: string }>();
  const config = drSkodaConfig(parseInt(questionId || '1'));
  return <UniversalQuestionSolver {...config} />;
}

function SimpleQuestionWrapper() {
  const { questionId } = useParams<{ questionId: string }>();
  const config = simpleConfig(parseInt(questionId || '1'));
  return <UniversalQuestionSolver {...config} />;
}

function StudyQuestionWrapper() {
  const { questionId } = useParams<{ questionId: string }>();
  const config = studyConfig(parseInt(questionId || '1'));
  return <UniversalQuestionSolver {...config} />;
}

function ExamQuestionWrapper() {
  const { questionId } = useParams<{ questionId: string }>();
  const config = createCustomQuestionConfig(parseInt(questionId || '1'), 'minimal', {
    uiConfig: { showProgress: true, className: 'exam-mode' }
  });
  return <UniversalQuestionSolver {...config} />;
}

function DefaultQuestionWrapper() {
  const { questionId } = useParams<{ questionId: string }>();
  const config = studyConfig(parseInt(questionId || '1')); // Padr√£o: modo estudo
  return <UniversalQuestionSolver {...config} />;
}

// ==========================================
// EXEMPLO 5: INTEGRA√á√ÉO COM LISTA DE QUEST√ïES
// ==========================================

// Card de quest√£o com m√∫ltiplas op√ß√µes
export function EnhancedQuestionCard({ question }: { question: any }) {
  const navigate = useNavigate();
  
  return (
    <div className="question-card">
      <div className="question-header">
        <h3>{question.title}</h3>
        <span className="question-category">{question.category}</span>
      </div>
      
      <div className="question-stats">
        <span>‚è±Ô∏è {question.estimatedTime || 5} min</span>
        <span>üìä {question.difficulty || 'M√©dio'}</span>
      </div>
      
      <div className="question-actions">
        {/* Bot√£o principal - Dr. Skoda completo */}
        <button 
          className="btn btn-primary"
          onClick={() => navigate(`/question/dr-skoda/${question.id}`)}
        >
          üßë‚Äç‚öïÔ∏è Dr. Skoda
        </button>
        
        {/* Modo estudo */}
        <button 
          className="btn btn-secondary"
          onClick={() => navigate(`/question/study/${question.id}`)}
        >
          üìö Estudar
        </button>
        
        {/* Quest√£o r√°pida */}
        <button 
          className="btn btn-outline"
          onClick={() => navigate(`/question/simple/${question.id}`)}
        >
          ‚ö° R√°pido
        </button>
        
        {/* Adicionar ao simulado */}
        <button 
          className="btn btn-ghost"
          onClick={() => console.log('Adicionar quest√£o', question.id, 'ao simulado')}
        >
          ‚ûï Simulado
        </button>
      </div>
    </div>
  );
}

// ==========================================
// EXEMPLO 6: HOOK PERSONALIZADO PARA CONFIGURA√á√ïES
// ==========================================

// Hook para centralizar l√≥gica de configura√ß√£o
export function useQuestionConfig(
  questionId: number,
  mode: 'dr-skoda' | 'simple' | 'study' | 'exam' | 'review' = 'study'
) {
  const navigate = useNavigate();
  
  const configs = {
    'dr-skoda': () => drSkodaConfig(
      questionId,
      () => navigate('/questions'),
      () => navigate('/questions')
    ),
    
    'simple': () => simpleConfig(
      questionId,
      () => navigate('/questions'),
      () => navigate('/questions')
    ),
    
    'study': () => studyConfig(
      questionId,
      () => navigate('/questions'),
      () => navigate('/questions')
    ),
    
    'exam': () => createCustomQuestionConfig(questionId, 'minimal', {
      uiConfig: { showProgress: true, className: 'exam-mode' },
      onBack: () => navigate('/exam'),
      onFinish: () => navigate('/exam')
    }),
    
    'review': () => createCustomQuestionConfig(questionId, 'review', {
      onBack: () => navigate('/review'),
      onFinish: () => navigate('/review')
    })
  };
  
  return configs[mode]();
}

// Uso do hook
export function FlexibleQuestionPage() {
  const { questionId, mode } = useParams<{ 
    questionId: string; 
    mode?: 'dr-skoda' | 'simple' | 'study' | 'exam' | 'review' 
  }>();
  
  const config = useQuestionConfig(
    parseInt(questionId || '1'),
    mode || 'study'
  );
  
  return <UniversalQuestionSolver {...config} />;
}

// ==========================================
// EXEMPLO 7: INTEGRA√á√ÉO COM CONTEXTO GLOBAL
// ==========================================

// Context para configura√ß√µes globais
interface QuestionContextType {
  defaultMode: 'dr-skoda-full' | 'simple' | 'study';
  userPreferences: {
    showProgress: boolean;
    enableAnalytics: boolean;
    saveAttempts: boolean;
  };
}

const QuestionContext = createContext<QuestionContextType>({
  defaultMode: 'study',
  userPreferences: {
    showProgress: true,
    enableAnalytics: true,
    saveAttempts: true
  }
});

// Componente que usa o contexto
export function ContextAwareQuestion({ questionId }: { questionId: number }) {
  const { defaultMode, userPreferences } = useContext(QuestionContext);
  
  const config = createCustomQuestionConfig(
    questionId,
    defaultMode,
    {
      uiConfig: {
        showProgress: userPreferences.showProgress
      },
      integrationConfig: {
        trackAnalytics: userPreferences.enableAnalytics,
        saveAttempts: userPreferences.saveAttempts
      }
    }
  );
  
  return <UniversalQuestionSolver {...config} />;
}

// ==========================================
// EXEMPLO 8: MIGRA√á√ÉO GRADUAL
// ==========================================

// Componente h√≠brido para migra√ß√£o gradual
export function HybridQuestion({ questionId }: { questionId: number }) {
  const [useNewSystem] = useState(true);
  
  if (useNewSystem) {
    // Sistema novo
    const config = studyConfig(questionId);
    return <UniversalQuestionSolver {...config} />;
  } else {
    // Sistema antigo (fallback) - placeholder
    return <div>Sistema antigo - quest√£o {questionId}</div>;
  }
}

// Utilit√°rio para testar diferentes configura√ß√µes
export function QuestionTester({ questionId }: { questionId: number }) {
  const [currentPreset, setCurrentPreset] = useState<'dr-skoda-full' | 'simple' | 'study'>('study');
  
  const configs = {
    'dr-skoda-full': drSkodaConfig(questionId),
    'simple': simpleConfig(questionId),
    'study': studyConfig(questionId)
  };
  
  return (
    <div>
      <div className="preset-selector">
        <button onClick={() => setCurrentPreset('dr-skoda-full')}>Dr. Skoda</button>
        <button onClick={() => setCurrentPreset('simple')}>Simples</button>
        <button onClick={() => setCurrentPreset('study')}>Estudo</button>
      </div>
      
      <UniversalQuestionSolver {...configs[currentPreset]} />
    </div>
  );
}

// ==========================================
// RESUMO DA MIGRA√á√ÉO
// ==========================================

/*
BENEF√çCIOS DA MIGRA√á√ÉO:

‚úÖ C√≥digo Reutiliz√°vel
- Uma √∫nica implementa√ß√£o para todos os tipos de quest√£o
- Redu√ß√£o de 80% no c√≥digo duplicado

‚úÖ Configura√ß√£o Flex√≠vel  
- Presets para casos comuns
- Customiza√ß√£o total quando necess√°rio

‚úÖ Manuten√ß√£o Simplificada
- Bugs corrigidos em um lugar
- Novas features beneficiam todas as quest√µes

‚úÖ Experi√™ncia Consistente
- UI/UX padronizada
- Comportamento previs√≠vel

‚úÖ Escalabilidade
- F√°cil adicionar novos tipos de quest√£o
- Sistema preparado para crescimento

PROCESSO DE MIGRA√á√ÉO:

1. ‚úÖ Identificar quest√µes existentes
2. ‚úÖ Criar dados de fluxo (quando necess√°rio)
3. ‚úÖ Substituir componentes por UniversalQuestionSolver
4. ‚úÖ Testar todas as configura√ß√µes
5. ‚úÖ Atualizar rotas e navega√ß√£o
6. ‚úÖ Documentar casos espec√≠ficos

PR√ìXIMOS PASSOS:

1. üîÑ Migrar quest√µes uma por vez
2. üìä Monitorar analytics e performance
3. üé® Ajustar estilos conforme necess√°rio
4. üöÄ Expandir para novos tipos de quest√£o
*/