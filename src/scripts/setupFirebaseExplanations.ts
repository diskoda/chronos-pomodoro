#!/usr/bin/env node

/**
 * Script de configura√ß√£o completa do Firebase para explica√ß√µes
 * 
 * Este script:
 * 1. Verifica a configura√ß√£o do Firebase
 * 2. Migra todas as explica√ß√µes para o Firestore
 * 3. Configura as regras de seguran√ßa
 * 4. Testa a conectividade
 */

import { runMigration } from './migrateExplanationsToFirebase';
import { loadExplanationsFromFirebase, getExplanationsMetadata } from '../services/explanationsService';
import { FIREBASE_CONFIG } from '../config/firebase';

console.log('üöÄ Iniciando configura√ß√£o completa do Firebase para Explica√ß√µes');
console.log('='.repeat(60));

const setupFirebaseExplanations = async () => {
  try {
    // 1. Verificar configura√ß√£o
    console.log('1Ô∏è‚É£ Verificando configura√ß√£o do Firebase...');
    
    if (!FIREBASE_CONFIG.USE_FIREBASE) {
      console.log('‚ö†Ô∏è  Firebase est√° desabilitado na configura√ß√£o');
      console.log('   Para habilitar, altere USE_FIREBASE para true em src/config/firebase.ts');
      return;
    }
    
    console.log('‚úÖ Configura√ß√£o do Firebase OK');
    
    // 2. Executar migra√ß√£o
    console.log('\n2Ô∏è‚É£ Migrando explica√ß√µes para o Firestore...');
    await runMigration();
    
    // 3. Testar conectividade
    console.log('\n3Ô∏è‚É£ Testando conectividade e carregamento...');
    
    const explanations = await loadExplanationsFromFirebase();
    console.log(`‚úÖ Carregadas ${Object.keys(explanations).length} explica√ß√µes do Firebase`);
    
    // 4. Verificar metadados
    console.log('\n4Ô∏è‚É£ Verificando metadados...');
    
    const metadata = await getExplanationsMetadata();
    if (metadata) {
      console.log('‚úÖ Metadados encontrados:');
      console.log(`   - Total: ${metadata.totalExplanations} explica√ß√µes`);
      console.log(`   - Vers√£o: ${metadata.version}`);
      console.log(`   - Categorias: ${metadata.categories.length}`);
      console.log(`   - √öltima atualiza√ß√£o: ${metadata.lastUpdated.toLocaleString()}`);
    } else {
      console.log('‚ö†Ô∏è  Metadados n√£o encontrados');
    }
    
    // 5. Instru√ß√µes finais
    console.log('\nüéâ Configura√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('   1. Adicione o ExplanationsProvider ao seu App.tsx:');
    console.log('      ```tsx');
    console.log('      import { ExplanationsProvider } from "./contexts/ExplanationsContext";');
    console.log('      ');
    console.log('      function App() {');
    console.log('        return (');
    console.log('          <ExplanationsProvider>');
    console.log('            {/* Seu app aqui */}');
    console.log('          </ExplanationsProvider>');
    console.log('        );');
    console.log('      }');
    console.log('      ```');
    console.log('');
    console.log('   2. Use o hook useExplanationsContext nos componentes');
    console.log('   3. Acesse o painel admin em /admin para gerenciar');
    console.log('');
    console.log('üî• Sistema Firebase + Local h√≠brido configurado!');
    
  } catch (error) {
    console.error('\n‚ùå Erro na configura√ß√£o:', error);
    console.log('\nüîÑ Fallback: O sistema continuar√° funcionando com explica√ß√µes locais');
    throw error;
  }
};

// Executar setup
setupFirebaseExplanations()
  .then(() => {
    console.log('\nüèÅ Setup finalizado!');
  })
  .catch((error) => {
    console.error('\nüí• Falha no setup:', error);
    console.log('\nüìû Para suporte, verifique:');
    console.log('   1. Configura√ß√£o do Firebase em src/config/firebase.ts');
    console.log('   2. Permiss√µes do Firestore');
    console.log('   3. Conex√£o com a internet');
  });